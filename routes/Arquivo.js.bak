/*
Descrição: API para a Página de cadastro da tabela Arquivo
Autor    : CYI 28/07/2025
*/
const express = require('express');
const { param, body, validationResult } = require('express-validator');
const router = express.Router();
const { getPool } = require('../db');

router.get('/arquivoapi', async (req, res) => {
	const id = req.query.id;
    try {
      const pool = await getPool(); 
      const [[results]] = await pool.query('CALL ArquivoS(?)', [id]);

      const json_results = results.map(row => ({
		id: row.Id,
		nomearquivo: row.NomeArquivo,
		mimetype: row.mimetype,
		filesha256: row.fileSha256,
		
      }));

      res.json(json_results);
    } catch (err) {
      console.error('Erro GET /arquivoapi', err);
      res.status(500).json({ "error": err.message });
    }
  });

const validateArquivoInput = [
	
	body('nomearquivo').notEmpty().withMessage('NomeArquivo é obrigatória.'),
	body('mimetype').notEmpty().withMessage('mimetype é obrigatória.'),
	body('filesha256').notEmpty().withMessage('fileSha256 é obrigatória.'),
	body('id').optional({ values: 'falsy' }).isInt({ min: 1 }).withMessage('Código Id deve ser um inteiro positivo se informado.'),
];
router.post('/arquivoapi', validateArquivoInput, async (req, res) => {
	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		const errorMessages = errors.errors.map(error => error.msg);
		return res.status(400).json({ 
			success: false, 
			message: 'Dados de entrada inválidos: ' + errorMessages.join(''),
			errors: errors.array() 
		});
	}
    const { id, nomearquivo, mimetype, filesha256 } = req.body;

    try {
      const pool = await getPool();
      let query;
      let queryParams;

      let insertedId;

      if (!id) {
        query = `INSERT INTO Arquivo (NomeArquivo, mimetype, fileSha256) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE 
		NomeArquivo = VALUES(NomeArquivo), mimetype = VALUES(mimetype), fileSha256 = VALUES(fileSha256)
		;`;
        queryParams = [nomearquivo, mimetype, filesha256];
      } else {
        query = `INSERT INTO Arquivo (Id, NomeArquivo, mimetype, fileSha256) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE 
		NomeArquivo = VALUES(NomeArquivo), mimetype = VALUES(mimetype), fileSha256 = VALUES(fileSha256)
		;`;

        queryParams = [id, nomearquivo, mimetype, filesha256];
      }

      await pool.query(query, queryParams);

      if (!id) {
        const [lastInsertIdResults] = await pool.query('SELECT LAST_INSERT_ID() as Id');
		insertedId = lastInsertIdResults[0].Id;
      } else {
        insertedId = id;
      }

      res.status(200).json({
        success: true,
        message: 'Atualizado com sucesso!',
        data: { id: insertedId },
      });

    } catch (err) {
      console.error('Erro ao atualizar:', err);
      res.status(500).json({ success: false, message: 'Server error', error: err.message });
    }
  });

/* exemplo: ********* pode excluir comentários
const validateParams = [
  param('id').isInt().withMessage('Id must be an integer'),
  param('sequencia').notEmpty().withMessage('Sequencia cannot be empty'),
];
router.delete('/arquivoapid/:id/:sequencia', validateParams, async (req, res) => {

antigo:
const validateIdParam = param('id')
  .isInt({ min: 1 })
  .withMessage('Id must be a positive integer.');
router.delete('/arquivoapid/:id', validateIdParam, async (req, res) => {
**** fazer: isInt está fixo, deve mudar de acordo com o tipo
*/
const validateParamsArquivoapid = [
  param('id').isInt().withMessage('Id must be an bigint unsigned'),
];
router.delete('/arquivoapid/:id', validateParamsArquivoapid, async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ success: false, message: "Parâmetros inválidos para remover Arquivo", errors: errors.array() });
  }

	// mudar o tipo se necessario ***
  const id = parseInt(req.params.id, 10);
  const pool = await getPool();

  try {
    const [result] = await pool.query('DELETE FROM Arquivo WHERE Id=?', [id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ success: false, message: 'Registro não encontrado!' });
    }
    return res.json({ success: true, message: 'Registro apagado com sucesso!' });
  } catch (err) {
    console.error('Erro ao apagar Arquivo:', err);
    return res.status(500).json({ success: false, message: 'Server error', error: err.message });
  }
});

module.exports = router;

